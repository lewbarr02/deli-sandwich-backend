<!DOCTYPE html>
<html>
<head>
  <title>Deli Sandwich Summary</title>
  <style>
    body {
      font-family: 'Nunito Sans', sans-serif;
      margin: 2rem;
    }
    h1, h2 {
      color: #d35400;
    }
    ul {
      list-style-type: none;
      padding-left: 0;
    }
    li {
      margin-bottom: 5px;
    }
    .copy-box {
      background: #f1f1f1;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 20px;
      display: inline-block;
    }
    button {
      margin-left: 10px;
      padding: 4px 10px;
    }
    .lead-section {
      border-top: 2px solid #ddd;
      margin-top: 30px;
      padding-top: 20px;
    }
    .converted-boxes {
      display: inline-table;
      border: 1px solid #ccc;
      border-radius: 6px;
      overflow: hidden;
      margin-bottom: 20px;
    }
    .converted-boxes div {
      display: table-cell;
      padding: 12px 20px;
      text-align: center;
      vertical-align: middle;
    }
    .converted-boxes h3 {
      margin: 0;
      font-size: 1.8rem;
    }
    .converted-boxes p {
      margin: 0;
      font-size: 0.85rem;
      color: #555;
    }
    .converted-boxes .green {
      color: green;
    }
    .converted-boxes .red {
      color: #e55353;
    }
    .converted-boxes .orange {
      color: #e6a600;
    }
    .lead-table {
      width: 100%;
      border-collapse: collapse;
    }
    .lead-table th, .lead-table td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    .lead-table th {
      background-color: #f9f9f9;
    }
  .mini-map {
  width: 360px;
  height: 240px;
  border: 1px solid #ccc;
  border-radius: 6px;
  flex-shrink: 0;
}
</style>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;600&display=swap" rel="stylesheet">
</head>
<body>

  
<div style="margin-bottom: 1rem;">
  <img src="/images/DeliSandwich_AI_Insights_Clean.png" alt="Deli Sandwich AI Insights" style="height: 240px;">
</div>

  <ul>
  <% aiInsights.forEach(item => { %>
    <li><%= item %></li>
  <% }) %>
  </ul>

  <div class="copy-box">
    <span id="summaryLink">http://localhost:3000/my-summary?from=<%= from %>&to=<%= to %></span>
    <button onclick="copyLink()">üìã Copy Link</button>
    <div id="copyConfirm" style="display:none;">‚úÖ Link copied!</div>
  </div>

  <p><a href="/my-summary-pdf?from=<%= from %>&to=<%= to %>">üìÑ Download as PDF</a></p>

  <% const convertedLeads = leads.filter(l => l.status === 'Converted');
     const hotLeads = leads.filter(l => l.status === 'Hot');
     const warmLeads = leads.filter(l => l.status === 'Warm');
     const arrSum = leadsArr => leadsArr.reduce((sum, l) => {
  const raw = (l.ARR || '').toString().replace(/,/g, '');
  return sum + (parseFloat(raw) || 0);
}, 0);
  %>

  <% const sections = [
    { title: 'üèÜ Converted Leads', data: convertedLeads, color: 'green' },
    { title: 'üî• Hot Leads', data: hotLeads, color: 'red' },
    { title: 'üåû Warm Leads', data: warmLeads, color: 'orange' }
  ];
  sections.forEach(section => { %>
  <div class="lead-section">
    <h2 style="<% if (section.title.includes('Converted')) { %>color: green;<% } else if (section.title.includes('Hot')) { %>color: red;<% } %>"><%= section.title %></h2>
    
<div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 2rem;">
  <div class="converted-boxes">
    <div>
      <h3><%= section.data.length %></h3>
      <p><%= section.title.split(' ')[1] %></p>
    </div>
    <div>
      <h3 class="<%= ['hot', 'warm'].includes(section.title.toLowerCase().split(' ')[1]) ? 'green' : section.color %>">$<%= arrSum(section.data).toLocaleString() %></h3>
      <p>ARR</p>
    </div>
  </div>
  <div style="margin: 0 auto;">
    <div class="mini-map" id="map-<%= section.title.split(' ')[1].toLowerCase() %>"></div>
  </div>
</div>
</div>
      <div>
        <h3 class="<%= ['hot', 'warm'].includes(section.title.toLowerCase().split(' ')[1]) ? 'green' : section.color %>">$<%= arrSum(section.data).toLocaleString() %></h3>
        <p>ARR</p>
      </div>
    </div>
    <h3>üóÇÔ∏è Lead Breakdown</h3>
    <table class="lead-table">
      <thead>
        <tr>
          <th>Name</th>
          <th>Company</th>
          <th>Type</th>
          <th>Size</th>
          <th>Notes</th>
          <th>Tag</th>
          <th>ARR</th>
        </tr>
      </thead>
      <tbody>
      <% section.data.forEach(lead => { %>
        <tr>
          <td><%= lead.name %></td>
          <td><%= lead.company %></td>
          <td><%= lead.Type === 'PMC' ? 'üè¢ PMC' : 'üè† SMA' %></td>
          <td><%= lead.Size || '' %></td>
          <td><%= lead.notes || '' %></td>
          <td><%= lead.Tags || '' %></td>
          <td>$<%= lead.ARR || '0' %></td>
        </tr>
      <% }) %>
      </tbody>
    </table>
  </div>
  <% }) %>

  <script>
    function copyLink() {
      const linkText = document.getElementById("summaryLink").textContent;
      navigator.clipboard.writeText(linkText).then(() => {
        document.getElementById("copyConfirm").style.display = "block";
        setTimeout(() => {
          document.getElementById("copyConfirm").style.display = "none";
        }, 1500);
      });
    }
  </script>



<script>
  const sectionMaps = {
    converted: <%- JSON.stringify(convertedLeads) %>,
    hot: <%- JSON.stringify(hotLeads) %>,
    warm: <%- JSON.stringify(warmLeads) %>
  };

  const markerColors = {
    converted: "green",
    hot: "red",
    warm: "orange"
  };

  Object.entries(sectionMaps).forEach(([status, leads]) => {
    const mapEl = document.getElementById(`map-${status}`);
    if (mapEl) {
      const map = L.map(mapEl).setView([37.8, -96], 4);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
      }).addTo(map);

      leads.forEach(lead => {
        const lat = parseFloat(lead.Latitude);
        const lng = parseFloat(lead.Longitude);

        if (!isNaN(lat) && !isNaN(lng)) {
          const marker = L.circleMarker([lat, lng], {
            radius: 8,
            fillColor: markerColors[status],
            color: "#000",
            weight: 1,
            opacity: 1,
            fillOpacity: 0.9
          }).addTo(map);

          marker.bindPopup(`<strong>${lead.company || 'Unnamed Lead'}</strong><br>${lead.city || ''}, ${lead.state || ''}`);
        }
      });
    }
  });
</script>


</body>
</html>